/* Copyright (c) 2023, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import com.google.gson.stream.JsonWriter;
 
aspect CallGraphWriter {
  inh InvocationTarget InvocationTarget.entryPoint();
  eq Program.getChild().entryPoint() = getTarget(entryPointPackage, entryPointMethod);

  syn boolean InvocationTarget.isEntryPoint() = this == entryPoint();

  public void Program.writeCallGraph(OutputStream out) {
    try {
      JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, "UTF-8"));
      writer.setIndent("    ");
  
      InvocationTarget entryPoint = getTarget(entryPointPackage, entryPointMethod);
      ArrayList<InvocationTarget> targets = new ArrayList<InvocationTarget>();
      completeCallGraph(entryPoint, new HashSet<InvocationTarget>(), targets);
  
      writer.beginObject();
      writer.name("status").value("ok");
      writer.name("data");
      writer.beginObject();
      writer.name("nodes");
      writer.beginArray();
  
      for (InvocationTarget target : targets) {
        target.writeCallGraphNode(writer);
      }
  
      writer.endArray();
      writer.name("edges");
      writer.beginArray();
  
      for (InvocationTarget target : targets) {
        target.writeCallGraphEdge(writer);
      }
  
      writer.endArray();
      writer.endObject();
      writer.endObject();
      writer.close();
    } catch (IOException e) {}
  }

  public void InvocationTarget.writeCallGraphNode(JsonWriter writer) {
    try {
      writer.beginObject();
      writer.name("id");
      targetSignature().writeIdentifier(writer);
      writer.name("type").value(returnType());
      writer.name("path").value(enclosingCompilationUnit().pathName());
      writer.name("line").value(getLine(getStart()));
      writer.name("params");
      writer.beginArray();
  
      for (Map.Entry<String, String> entry : paramTypes().entrySet()) {
        writer.beginObject();
        writer.name("id").value(entry.getKey());
        writer.name("type").value(entry.getValue());
        writer.endObject();
      }
  
      writer.endArray();
      writer.name("kind").value(kind());
      writer.name("visibility").value(visibility());
      writer.endObject();
    } catch (IOException e) {}
  }

  public void InvocationTarget.writeCallGraphEdge(JsonWriter writer) {
    try {
      for (InvocationTarget neighbor : cg()) {
        writer.beginObject();
        writer.name("source");
        targetSignature().writeIdentifier(writer);
        writer.name("target");
        neighbor.targetSignature().writeIdentifier(writer);
        writer.endObject();
      }
    } catch (IOException e) {}
  }

  public void Program.completeCallGraph(InvocationTarget target,
                                        Set<InvocationTarget> visited,
                                        ArrayList<InvocationTarget> cg) {
    if (visited.contains(target))
      return;
    visited.add(target);
    if (target.shouldBeConsiderAsMethod()) {
      cg.add(target);
    }
    for (InvocationTarget neighbor : target.cg()) {
      completeCallGraph(neighbor, visited, cg);
    }
    return;
  }
}